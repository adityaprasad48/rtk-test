import { Box, Image } from '@chakra-ui/react';
import React, { useMemo, useState } from 'react';
import InfiniteScroll from 'react-infinite-scroll-component';
import { useGetAllRandomUsersQuery } from './reducers/randomApi';

const ImageFilterList = ({ watch }: any) => {
	const [currentPage, setCurrentPage] = useState(1);
	// const currentPage = 1; // something calculated from ScrollPosition
	const { data: lastResult } = useGetAllRandomUsersQuery(
		{
			name: watch('query'),
			page: currentPage - 1,
			limit: 10,
			// isSubmitted only for calling querying on filter
			// kowledge on offset, loadMore,
		},
		{ skip: currentPage === 1 }
	);
	const { data: currentResult } = useGetAllRandomUsersQuery({
		name: watch('query'),
		page: currentPage,
		limit: 10,
	});
	const { data: nextResult } = useGetAllRandomUsersQuery({
		name: watch('query'),
		page: currentPage + 1,
		limit: 10,
	});

	let pageSize = 500;
	let offset = 50;

	const combined = useMemo(() => {
		// const arr = new Array(pageSize * (currentPage + 1));
		// for (const data of [lastResult, currentResult, nextResult]) {
		// 	if (data) {
		// 		arr.splice(offset, data.length, ...data);
		// 	}
		// }
		// return arr;
		return [
			...(lastResult ? lastResult : []),
			...(currentResult ? currentResult : []),
			...(nextResult ? nextResult : []),
		];
	}, [lastResult, currentResult, nextResult]);

	// const [loadData, setLoadData] = useState<any>(
	// 	data && data.length > 0 ? data : []
	// );

	console.log(`'watch('query')`, watch('query'));
	console.log('currentPage', currentPage);
	console.log('---------------------------------------------');

	console.log('lastResult', lastResult);
	console.log('currentResult', currentResult);
	console.log('nextResult', nextResult);
	console.log('---------------------------------------------');

	console.log('combined', combined);

	const loadMore = () => {
		// setCurrentPage(currentPage + 1);
		setCurrentPage((prev) => prev + 1);

		// setLoadData([...loadData, ...data]);
	};

	return (
		<Box borderColor="teal" borderWidth="2px">
			<InfiniteScroll
				dataLength={100}
				next={loadMore}
				hasMore={true}
				loader={<h4>Loading.....</h4>}
				endMessage={
					<p style={{ textAlign: 'center' }}>
						<b>Yay! You have seen it all</b>
					</p>
				}
			>
				{combined &&
					combined.length > 0 &&
					combined.map((customer: any, index: number) => (
						<Box
							key={customer.id}
							// maxW="sm"
							width="100%"
							borderWidth="1px"
							borderRadius="lg"
							overflow="hidden"
							marginBottom="10px"
							display="flex"
							aligntItems="center"
							p="2"
						>
							<Box flex="1">
								<Box
									mt="1"
									fontWeight="semibold"
									as="h4"
									lineHeight="tight"
									isTruncated
								>
									{customer.name}
								</Box>
							</Box>

							<Image height="100px" src={customer.avatar} />
						</Box>
					))}
			</InfiniteScroll>
		</Box>
	);
};

export default ImageFilterList;
